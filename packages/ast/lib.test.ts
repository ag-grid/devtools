import { expect, test } from 'vitest';

import * as lib from './lib';

test('module exports', () => {
  expect({ ...lib }).toEqual({
    AccessorKey: lib.AccessorKey,
    AccessorReference: lib.AccessorReference,
    areAccessorKeysEqual: lib.areAccessorKeysEqual,
    areLiteralsEqual: lib.areLiteralsEqual,
    ast: lib.ast,
    AstAnyType: lib.AstAnyType,
    AstArrayType: lib.AstArrayType,
    AstFunctionType: lib.AstFunctionType,
    AstIntersectionType: lib.AstIntersectionType,
    AstObjectType: lib.AstObjectType,
    AstPrimitiveType: lib.AstPrimitiveType,
    AstPrimitiveValueType: lib.AstPrimitiveValueType,
    AstTupleType: lib.AstTupleType,
    AstType: lib.AstType,
    AstTypeVariant: lib.AstTypeVariant,
    AstUnionType: lib.AstUnionType,
    createNamedPropertyKey: lib.createNamedPropertyKey,
    createPropertyKey: lib.createPropertyKey,
    createStaticPropertyKey: lib.createStaticPropertyKey,
    findClassMemberAccessorExpressions: lib.findClassMemberAccessorExpressions,
    findClassMemberAccessors: lib.findClassMemberAccessors,
    findNamedClassMemberAccessorExpressions: lib.findNamedClassMemberAccessorExpressions,
    findNamedModuleImport: lib.findNamedModuleImport,
    generate: lib.generate,
    generateUniqueScopeBinding: lib.generateUniqueScopeBinding,
    getAccessorExpressionPaths: lib.getAccessorExpressionPaths,
    getAstNodeChildEntries: lib.getAstNodeChildEntries,
    getFunctionReturnValues: lib.getFunctionReturnValues,
    getImportSpecifierImportedName: lib.getImportSpecifierImportedName,
    getLiteralPropertyKey: lib.getLiteralPropertyKey,
    getLocatedPath: lib.getLocatedPath,
    getModuleRoot: lib.getModuleRoot,
    getNamedModuleImportExpression: lib.getNamedModuleImportExpression,
    getNamedObjectLiteralStaticProperty: lib.getNamedObjectLiteralStaticProperty,
    getNamedObjectLiteralStaticPropertyValue: lib.getNamedObjectLiteralStaticPropertyValue,
    getNamedPackageNamespaceImportExpression: lib.getNamedPackageNamespaceImportExpression,
    getNodeChildEntries: lib.getNodeChildEntries,
    getNodePropertyFieldNames: lib.getNodePropertyFieldNames,
    getObjectLiteralStaticPropertyValues: lib.getObjectLiteralStaticPropertyValues,
    getOptionalNodeFieldValue: lib.getOptionalNodeFieldValue,
    getStaticPropertyKey: lib.getStaticPropertyKey,
    hasNamedObjectLiteralStaticProperty: lib.hasNamedObjectLiteralStaticProperty,
    inferAstTypes: lib.inferAstTypes,
    insertNamedModuleImport: lib.insertNamedModuleImport,
    matchModuleImportName: lib.matchModuleImportName,
    matchModuleImportPackageName: lib.matchModuleImportPackageName,
    matchNamedPropertyKeyExpression: lib.matchNamedPropertyKeyExpression,
    matchNode: lib.matchNode,
    node: lib.node,
    parseAst: lib.parseAst,
    parseStringExpressionValue: lib.parseStringExpressionValue,
    pattern: lib.pattern,
    replace: lib.replace,
    template: lib.template,
    transformAst: lib.transformAst,
    traverse: lib.traverse,
  });
});
